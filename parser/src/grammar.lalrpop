use std::str::FromStr;
use crate::{Dimension};


use crate::types::{Operator, Variable};
use memory::types::DataType;
use crate::functions::{Function, FunctionParam, FunctionSignature};

use crate::expressions::{Expression, Index};


use crate::expressions::constant::{Const, TypeConst};

use crate::expressions::id::{Access, Id};
use crate::expressions::operation::Operation;
use crate::expressions::call::Call;
use crate::statements::{Block, Program, Statement};


grammar;


// Macros

PComma<TItem>: Vec<TItem> = {
    <mut vec: (<TItem> COMMA)*> <c: TItem?> => match c {
        None => vec,
        Some(c) => {
            vec.push(c);
            vec
        }
    }
}

PBoxed<T>: Box<T> = T => Box::new(<>);

// Types

PType: DataType = {
    T_INT => DataType::Int,
    T_FLOAT => DataType::Float,
    T_BOOl => DataType::Bool,
    T_STR => DataType::String,
    T_DATAFRAME => DataType::DataFrame,
}

PFunctionType: DataType = {
    PType,
    T_VOID => DataType::Void
}

PInt: Const = NUMBER => Const::new(<>, DataType::Int);

PFloat: Const = <f: FLOAT> => Const::new(<>, DataType::Float);

PBool: Const = {
    TRUE => Const::new(<>, DataType::Bool),
    FALSE => Const::new(<>, DataType::Bool)
}

PStr: Const = <s: STRING> => Const::new(&s[1..s.len() - 1], DataType::String);

// PVectorConst: TypeConst = LBRACKET <PComma<PExpr>> RBRACKET => TypeConst::Vector(<>);

PSimpleConst = {
    PInt,
    PStr,
    PFloat,
    PBool
}

PConst = {
    PSimpleConst,
    //PVectorConst
}

PId: Expression = ID => 
    Expression::Access(Access::new(
        Id::new(<>, None),
        vec![],
    ));

// Variables

PIndexing: Index = {
    <begin:PExpr> COLON <end:PExpr> => Index::Range(begin, end),
    <idx:PExpr> => Index::Simple(idx)
}


PDimension: Dimension = {
    LBRACKET <a: PInt> RLBRACKET <b: PInt> RBRACKET => Dimension::new(2, vec![a, b]),
    LBRACKET <PInt> RBRACKET => Dimension::new(1, vec![<>])
}

PVarDeclaration: Variable = {
    LET <id: ID> COLON <data_type: PType> <dim: PDimension?> <value: (ASSIGN <PExpr>)?> SEMICOLON => Variable::new(
        String::from(id),
        data_type,
        dim.unwrap_or(Dimension::new_scalar()),
        value
    )
}

// TODO Fix w custom tokenizer, allow multiple dimensions and raise error on higher than two
PVarRefIndex: Vec<Index> = {
    LBRACKET <PIndexing> RBRACKET  => vec![<>],
    LBRACKET <a:PIndexing> RLBRACKET <b:PIndexing> RBRACKET => vec![<>]
}

PVarReference: Access = {
    <id: ID> <indexing: PVarRefIndex?> => 
        Access::new(
            Id::new(id, None),
            indexing.unwrap_or(vec![])
        )
}

PVarAssignment: Statement = <var: PVarReference> ASSIGN <exp: PExpr> => Statement::VarAssign(var, exp);

// Operators

PExprOp: Operator = {
    AND => Operator::And,
    OR => Operator::Or
}

PLogicOp: Operator = {
    LT => Operator::LessThan,
    GT => Operator::GreaterThan,
    LEQ => Operator::LessOrEq,
    GEQ => Operator::GreaterOrEq,
    NOTEQUAL => Operator::NotEq,
    EQUAL => Operator::Eq,
}

PMathOp: Operator = {
    ADD => Operator::Add,
    SUB => Operator::Sub,
}

PFactorOp: Operator = {
    MUL => Operator::Mul,
    DIV => Operator::Div,
}

PPipeOp: Operator = PIPE => Operator::Pipe;

// Expressions

PTier<Op, NextTerm>: Box<Expression> = {
    PTier<Op, NextTerm> Op NextTerm => 
        Box::new(
            Expression::Op(
                Operation::new(<>)
            )
        ),
    NextTerm
}

PExpr: Box<Expression> = PTier<PExprOp, PLogicExpr>;

PLogicExpr: Box<Expression> = {
    PMathExpr PLogicOp PMathExpr => 
        Box::new(
            Expression::Op(
                Operation::new(<>)
            )
        ),
    PMathExpr,
}

PMathExpr: Box<Expression> = PTier<PMathOp, PTerm>;

PTerm: Box<Expression> = PTier<PFactorOp, PFactor>;

PUnaryOP = {
    SUB,
    NOT
}

PFactor: Box<Expression> = {
    PFactor PPipeOp PBoxed<PId> => 
        Box::new(
            Expression::Op(
                Operation::new(<>)
            )
        ),
    <op: PUnaryOP?> <item:PItem> => match op {
        None => item,
        Some(op) => match &op[..] {
            "!" => Box::new(Expression::Not(item)),
            "-" => Box::new(Expression::Negative(item)),
            _ => panic!()
        }
    },
}

PItem: Box<Expression> = {
    PVarReference => Box::new(Expression::Access(<>)),
    PConst => Box::new(Expression::Const(<>)),
    LPAREN <PExpr> RPAREN => <>,
    PFunctionCall => Box::new(Expression::Call(<>))
}

// Functions


PFuncParam: FunctionParam = <id: ID> COLON <dtype: PType> <dim: PDimension?> => FunctionParam(Variable::new(
        String::from(id),
        dtype,
        dim.unwrap_or(Dimension::new_scalar()),
        None
    ));

PCallParams = PComma<PExpr>;

PFunctionParams = PComma<PFuncParam>;

PFnSignature: FunctionSignature = FN <id: CALL_ID> <params: PFunctionParams> RPAREN COLON <dtype: PFunctionType> => FunctionSignature {
    id:  String::from(&id[..id.len() - 1]),
    data_type: dtype,
    params: params,
    is_native: false
};

PFunctionItem: Statement = {
    PStatement,
    PVarDeclaration => Statement::VarDeclaration(<>),
}

PFunctionBlock: Block = LCBRACKET <statements: PFunctionItem*> RCBRACKET => Block(statements);

PFunction: Function = <signature: PFnSignature> <block: PFunctionBlock> => Function::new(<>);

PFunctionCall: Call = <id: CALL_ID> <params: PCallParams> RPAREN => 
        Call::new(&id[..id.len() - 1], params);

PReturnStatement: Statement = RETURN <PExpr> SEMICOLON => Statement::Return(<>);

PStatement = {
    PCondition,
    PLoop,
    PReturnStatement,
    PLineStatement,
}

PGlobalStatement: Statement = {
    PFunction => Statement::FunctionDeclaration(<>),
    PStatement,
    PVarDeclaration =>  Statement::VarDeclaration(<>)
}

PBlock: Block = {
    PStatement => Block(vec![<>]),
    PStrictBlock
}

PLineStatement: Statement = {
    BREAK SEMICOLON => Statement::Break,
    CONTINUE SEMICOLON => Statement::Continue,
    <PVarAssignment> SEMICOLON,
    <PExpr> SEMICOLON => Statement::Expression(<>)
}

PElseBlock: Block = {
    PCondition => Block(vec![<>]),
    PStrictBlock
}

PCondition: Statement = {
    IF <condition: PExpr> RPAREN <if_block: PStrictBlock> <else_block: (ELSE <PElseBlock>)?> => 
        Statement::If {
            condition: condition,
            if_block: if_block,
            else_block: else_block
        }
}

PStrictBlock: Block = LCBRACKET <statements: PStatement*> RCBRACKET => Block(statements);

PLoop = {
    PForLoop,
    PWhileLoop
}

PForLoop: Statement = FOR <id: ID> IN <start: PExpr> COLON <end: PExpr> <step: (COLON <PExpr>)?>  RPAREN <block: PBlock> =>
    Statement::For {
        iterator_id: String::from(id),
        range: (start, end, step),
        block: block
    };

PWhileLoop: Statement = WHILE <condition: PExpr> RPAREN <block: PBlock> =>
    Statement::While {
        condition: condition,
        block: block
    };

pub PProgram: Program = PGlobalStatement* => Program(<>);

match {
    r#""[^"]*""# => STRING,
    "&&" => AND,
    "||" => OR,
    "!=" => NOTEQUAL,
    "!" => NOT,
    "==" => EQUAL,
    "|>" => PIPE,
    "<=" => LEQ,
    ">=" => GEQ,
    "<" => LT,
    ">" => GT,
    "+" => ADD,
    "-" => SUB,
    "*" => MUL,
    "/" => DIV,
    "int" => T_INT,
    "float" => T_FLOAT,
    "bool" => T_BOOl,
    "str" => T_STR,
    "DataFrame" => T_DATAFRAME,
    "void" => T_VOID,
    "let" => LET,
    "true" => TRUE,
    "false" => FALSE,
    "fn" => FN,
    "return" => RETURN,
    "continue" => CONTINUE,
    "break" => BREAK,
    "for",
    r"for\s*\(" => FOR, // TODO Fix joint ( w/ custom tokenizer,
    "while",
    r"while\s*\(" => WHILE,
    "in" => IN,
    "(" => LPAREN,
    ")" => RPAREN,
    "if",
    r"if\s*\(" => IF,
    "else" => ELSE,
    "{" => LCBRACKET,
    "}" => RCBRACKET,
    "[" => LBRACKET,
    "]" => RBRACKET,
    "][" => RLBRACKET,
    "=" => ASSIGN,
    "," => COMMA,
    ":" => COLON,
    ";" => SEMICOLON,
    r"[a-z_A-Z]+[0-9_a-zA-Z]*" => ID,
    r"[0-9]+\.[0-9]+" => FLOAT,
    r"[0-9]+" => NUMBER,
} else {
    r"[a-z_A-Z]+[0-9_a-zA-Z]*\(" => CALL_ID,
    _
}

