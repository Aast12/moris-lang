// auto-generated: "lalrpop 0.19.8"
// sha3: 692df421c0e87633d66f462dbc62e961998fa2d164cd555d8413165f06b05bf6
use std::str::FromStr;
use crate::ast::{Dimension};
use crate::ast::types::{DataType, Function, FunctionParam, Operator, Variable, FunctionSignature};
use crate::ast::expressions::{Expression, Index};
use crate::ast::expressions::constant::{Const, TypeConst};
use crate::ast::expressions::id::{Access, Id};
use crate::ast::expressions::operation::Operation;
use crate::ast::expressions::call::Call;
use crate::ast::statements::{Block, Program, Statement};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__PProgram {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use std::str::FromStr;
    use crate::ast::{Dimension};
    use crate::ast::types::{DataType, Function, FunctionParam, Operator, Variable, FunctionSignature};
    use crate::ast::expressions::{Expression, Index};
    use crate::ast::expressions::constant::{Const, TypeConst};
    use crate::ast::expressions::id::{Access, Id};
    use crate::ast::expressions::operation::Operation;
    use crate::ast::expressions::call::Call;
    use crate::ast::statements::{Block, Program, Statement};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use self::__lalrpop_util::lexer::Token;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(Box<Expression>),
        Variant2(alloc::vec::Vec<Box<Expression>>),
        Variant3(FunctionParam),
        Variant4(alloc::vec::Vec<FunctionParam>),
        Variant5(core::option::Option<Box<Expression>>),
        Variant6(Block),
        Variant7(core::option::Option<Block>),
        Variant8(Const),
        Variant9(Vec<Box<Expression>>),
        Variant10(Vec<FunctionParam>),
        Variant11(Statement),
        Variant12(Dimension),
        Variant13(core::option::Option<Dimension>),
        Variant14(Operator),
        Variant15(FunctionSignature),
        Variant16(core::option::Option<FunctionParam>),
        Variant17(Function),
        Variant18(Call),
        Variant19(alloc::vec::Vec<Statement>),
        Variant20(DataType),
        Variant21(Expression),
        Variant22(Index),
        Variant23(Program),
        Variant24(Variable),
        Variant25(Vec<Index>),
        Variant26(core::option::Option<Vec<Index>>),
        Variant27(Access),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 74, 75, 0, 0, 10, 11, 0, 0, 0, 76, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 1
        0, 0, 0, -122, -122, 0, 0, 0, -122, -122, 0, -122, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, -122, 0, -122, 0, -122, 81, -122, 0, 0, -122, -122, -122, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 74, 75, 0, 0, 10, 11, 0, 0, 0, 76, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 4
        0, 0, 0, 0, -89, 0, 0, 0, -89, -89, 0, 0, 0, 84, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 87, 0, -89, 0, -89, 0, 0, -89, -89, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 88, 0, 0, 0, -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, -40, 0, 0, -40, -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, -118, -118, 0, 0, 0, -118, -118, 0, 90, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, 0, 0, -118, 91, 0, -118, 0, -118, 0, -118, 0, 0, -118, -118, -118, 0, -118, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 92, -96, 0, 0, 0, -96, -96, 0, 0, 0, -96, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, -96, 0, -96, 0, -96, 0, 0, -96, -96, -96, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, -24, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, -140, -140, -140, 0, 0, -140, -140, 0, -140, 0, -140, 0, 0, 0, 0, 0, -140, 0, 0, 0, 24, 0, 0, 0, -140, -140, 0, -140, 0, -140, -140, -140, 0, 0, -140, -140, -140, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 0, 76, 12, 0, 0, 0, 0, 77, 0, 0, 0, 114, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, -26, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 0, 76, 12, 0, 0, 0, 0, 77, 0, 0, 0, 132, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 26
        0, 0, 0, -121, -121, 0, 0, 0, -121, -121, 0, -121, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, -121, 0, -121, 0, -121, 81, -121, 0, 0, -121, -121, -121, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 141, 142, 143, 144, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 36, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 141, 142, 143, 144, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 153, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 36
        0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 141, 142, 143, 144, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 36, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 70, 9, 0, 0, 71, 0, 0, 0, 72, 73, 0, 75, 0, 0, 10, 11, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 163, 13, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 14,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 72, 73, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 0, 0, -106, -106, 0, 0, 0, -106, -106, 0, -106, 0, -106, 0, 0, 0, 0, 0, -106, 0, 0, 0, 0, 0, 0, 0, -106, -106, 0, -106, 0, -106, -106, -106, 0, 0, -106, -106, -106, 0, -106, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, -107, -107, 0, 0, -107, 0, 0, 0, -107, -107, -107, -107, 0, 0, -107, -107, 0, 0, 0, -107, -107, 0, 0, 0, 0, -107, 0, 0, 0, -107, -107, 0, 0, 0, -107, 0, -107, 0, 0, 0, 0, 0, 0, -107,
        // State 47
        0, 0, 0, -81, -81, 0, 0, 0, -81, -81, 0, -81, 0, -81, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, -81, -81, 0, -81, 0, -81, -81, -81, 0, 0, -81, -81, -81, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, -105, -105, 0, 0, 0, -105, -105, 0, -105, 0, -105, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, -105, -105, 0, -105, 0, -105, -105, -105, 0, 0, -105, -105, -105, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, -94, -94, 0, 0, -94, 0, 0, 0, -94, -94, -94, -94, 0, 0, -94, -94, 0, 0, 0, -94, -94, 0, 0, 0, 0, -94, 0, 0, 0, -94, -94, 0, 0, 0, -94, 0, -94, 0, 0, 0, 0, 0, 0, -94,
        // State 51
        0, 0, 0, 0, 0, 0, -69, -69, 0, 0, -69, 0, 0, 0, -69, -69, -69, -69, 0, 0, -69, -69, 0, 0, 0, -69, -69, 0, 0, 0, 0, -69, 0, 0, 0, 0, -69, 0, 0, 0, -69, 0, -69, 0, 0, 0, 0, 0, 0, -69,
        // State 52
        0, 0, 0, -83, -83, 0, 0, 0, -83, -83, 0, -83, 0, -83, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, -83, -83, 0, -83, 0, -83, -83, -83, 0, 0, -83, -83, -83, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, -74, -74, 0, 0, -74, 0, 0, 0, -74, -74, -74, -74, 0, 0, -74, -74, 0, 0, 0, -74, -74, 0, 0, 0, 0, -74, 0, 0, 0, 0, -74, 0, 0, 0, -74, 0, -74, 0, 0, 0, 0, 0, 0, -74,
        // State 54
        0, 0, 0, -103, -103, 0, 0, 0, -103, -103, 0, -103, 0, -103, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, -103, -103, 0, -103, 0, -103, -103, -103, 0, 0, -103, -103, -103, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, -47, -47, 0, 0, 0, -47, -47, 0, -47, 0, -47, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, -47, -47, 0, -47, 0, -47, -47, -47, 0, 0, -47, -47, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, -110, -110, 0, 0, -110, 0, 0, 0, -110, -110, -110, -110, 0, 0, -110, -110, 0, 0, 0, -110, -110, 0, 0, 0, 0, -110, 0, 0, 0, -110, -110, 0, 0, 0, -110, 0, -110, 0, 0, 0, 0, 0, 0, -110,
        // State 57
        0, 0, 0, 0, -120, 0, 0, 0, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, -120, 0, 0, -120, -120, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, -108, -108, 0, 0, -108, 0, 0, 0, -108, -108, -108, -108, 0, 0, -108, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, -108, 0, -108, 0, 0, 0, 0, 0, 0, -108,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, -109, -109, 0, 0, -109, 0, 0, 0, -109, -109, -109, -109, 0, 0, -109, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, -109, 0, -109, 0, 0, 0, 0, 0, 0, -109,
        // State 61
        0, 0, 0, -33, -33, 0, 0, 0, -33, -33, 0, -33, 0, -33, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, -33, 0, -33, 0, -33, -33, -33, 0, 0, -33, -33, -33, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, -70, -70, 0, 0, -70, 0, 0, 0, -70, -70, -70, -70, 0, 0, -70, -70, 0, 0, 0, -70, -70, 0, 0, 0, 0, -70, 0, 0, 0, 0, -70, 0, 0, 0, -70, 0, -70, 0, 0, 0, 0, 0, 0, -70,
        // State 63
        0, 0, 0, -104, -104, 0, 0, 0, -104, -104, 0, -104, 0, -104, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, -104, -104, 0, -104, 0, -104, -104, -104, 0, 0, -104, -104, -104, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, -124, -124, 0, 0, 0, -124, -124, 0, 0, 0, -124, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, -124, 0, -124, 0, -124, 0, 0, -124, -124, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, -71, -71, 0, 0, -71, 0, 0, 0, -71, -71, -71, -71, 0, 0, -71, -71, 0, 0, 0, -71, -71, 0, 0, 0, 0, -71, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, -71, 0, 0, 0, 0, 0, 0, -71,
        // State 67
        0, 0, 0, -80, -80, 21, 0, 0, 0, 0, 0, -80, 0, -80, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, -80, -80, 0, -80, 0, -80, -80, 0, 0, 0, 0, 0, -80, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, -95, -95, 0, 0, -95, 0, 0, 0, -95, -95, -95, -95, 0, 0, -95, -95, 0, 0, 0, -95, -95, 0, 0, 0, 0, -95, 0, 0, 0, -95, -95, 0, 0, 0, -95, 0, -95, 0, 0, 0, 0, 0, 0, -95,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, -20, -20, 0, 0, 0, -20, -20, 0, -20, 0, -20, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, -20, -20, 0, -20, 0, -20, -20, -20, 0, 0, -20, -20, -20, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, -50, -50, 0, 0, 0, -50, -50, 0, -50, 0, -50, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, -50, -50, 0, -50, 0, -50, -50, -50, 0, 0, -50, -50, -50, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, -79, -79, 0, 0, 0, -79, -79, 0, -79, 0, -79, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, -79, -79, 0, -79, 0, -79, -79, -79, 0, 0, -79, -79, -79, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, -115, -115, 0, 0, 0, -115, -115, 0, -115, 0, -115, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, -115, -115, 0, -115, 0, -115, -115, -115, 0, 0, -115, -115, -115, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, -19, -19, 0, 0, 0, -19, -19, 0, -19, 0, -19, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, -19, -19, 0, -19, 0, -19, -19, -19, 0, 0, -19, -19, -19, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, -87, -87, 0, 0, -87, 0, 0, 0, -87, -87, -87, -87, 0, 0, -87, -87, 0, 0, 0, -87, -87, 0, 0, 0, 0, -87, 0, 0, 0, -87, -87, 0, 0, 0, -87, 0, -87, 0, 0, 0, 0, 0, 0, -87,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, -56, -56, 0, 0, -56, 0, 0, 0, -56, -56, -56, -56, 0, 0, -56, -56, 0, 0, 0, -56, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, -56, 0, 0, 0, -56, 0, -56, 0, 0, 0, 0, 0, 0, -56,
        // State 82
        0, 0, 0, 0, 0, 0, -75, -75, 0, 0, -75, 0, 0, 0, -75, -75, -75, -75, 0, 0, -75, -75, 0, 0, 0, -75, -75, 0, 0, 0, 0, -75, 0, 0, 0, 0, -75, 0, 0, 0, -75, 0, -75, 0, 0, 0, 0, 0, 0, -75,
        // State 83
        0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, -93, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, -91, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, -90, -90, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, -90, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, -92, -92, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, -92, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, -43, -43, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, -44, -44, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, -49, -49, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, -49, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, -48, -48, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, -97, -97, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, -97, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, -98, -98, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, -98, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, -86, -86, 0, 0, -86, 0, 0, 0, -86, -86, -86, -86, 0, 0, -86, -86, 0, 0, 0, -86, -86, 0, 0, 0, 0, -86, 0, 0, 0, -86, -86, 0, 0, 0, -86, 0, -86, 0, 0, 0, 0, 0, 0, -86,
        // State 94
        0, 0, 0, 0, 0, 0, -84, -84, 0, 0, -84, 0, 0, 0, -84, -84, -84, -84, 0, 0, -84, -84, 0, 0, 0, -84, -84, 0, 0, 0, 0, -84, 0, 0, 0, -84, -84, 0, 0, 0, -84, 0, -84, 0, 0, 0, 0, 0, 0, -84,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, -80, -80, 0, 0, 0, -80, -80, 0, -80, 0, -80, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, -80, -80, 0, -80, 0, -80, -80, -80, 0, 0, -80, -80, -80, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, -85, -85, 0, 0, -85, 0, 0, 0, -85, -85, -85, -85, 0, 0, -85, -85, 0, 0, 0, -85, -85, 0, 0, 0, 0, -85, 0, 0, 0, -85, -85, 0, 0, 0, -85, 0, -85, 0, 0, 0, 0, 0, 0, -85,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, -139, -139, -139, 0, 0, -139, -139, 0, -139, 0, -139, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, -139, -139, 0, -139, 0, -139, -139, -139, 0, 0, -139, -139, -139, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, -46, -46, 0, 0, 0, -46, -46, 0, -46, 0, -46, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, -46, -46, 0, -46, 0, -46, -46, -46, 0, 0, -46, -46, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, -21, -21, 0, 0, 0, -21, -21, 0, -21, 0, -21, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, -21, -21, 0, -21, 0, -21, -21, -21, 0, 0, -21, -21, -21, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, -76, -76, 0, 0, 0, -76, -76, 0, -76, 0, -76, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, -76, -76, 0, -76, 0, -76, -76, -76, 0, 0, -76, -76, -76, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, -64, -64, 0, 0, -64, 0, 0, 0, -64, -64, 0, -64, 0, 0, -64, -64, 0, 0, 0, -64, -64, 0, 0, 0, 0, -64, 0, 0, 0, -64, -64, 0, 0, 0, -64, 0, -64, 0, 0, 0, 0, 0, 0, -64,
        // State 111
        0, 0, 0, 0, 0, 0, -60, -60, 0, 0, -60, 0, 0, 0, -60, -60, 0, -60, 0, 0, -60, -60, 0, 0, 0, -60, -60, 0, 0, 0, 0, -60, 0, 0, 0, -60, -60, 0, 0, 0, -60, 0, -60, 0, 0, 0, 0, 0, 0, -60,
        // State 112
        0, 0, 0, 0, 0, 0, -61, -61, 0, 0, -61, 0, 0, 0, -61, -61, 0, -61, 0, 0, -61, -61, 0, 0, 0, -61, -61, 0, 0, 0, 0, -61, 0, 0, 0, -61, -61, 0, 0, 0, -61, 0, -61, 0, 0, 0, 0, 0, 0, -61,
        // State 113
        0, 0, 0, 0, 0, 0, -57, -57, 0, 0, -57, 0, 0, 0, -57, -57, -57, -57, 0, 0, -57, -57, 0, 0, 0, -57, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, -57, 0, -57, 0, 0, 0, 0, 0, 0, -57,
        // State 114
        0, 0, 0, 0, -88, 0, 0, 0, -88, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, -88, 0, 0, -88, -88, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, -119, 0, 0, 0, -119, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, -119, 0, 0, -119, -119, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, -123, -123, 0, 0, 0, -123, -123, 0, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, -123, 0, -123, 0, -123, 0, 0, -123, -123, -123, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 0, -59, -59, 0, 0, 0, -59, -59, 0, -59, 0, -59, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, -59, -59, 0, -59, 0, -59, -59, -59, 0, 0, -59, -59, -59, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, -4, -4, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, -4, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, -82, -82, 0, 0, 0, -82, -82, 0, -82, 0, -82, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, -82, -82, 0, -82, 0, -82, -82, -82, 0, 0, -82, -82, -82, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, -102, -102, 0, 0, -102, 0, 0, 0, -102, -102, -102, -102, 0, 0, -102, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, -102, 0, -102, 0, 0, 0, 0, 0, 0, -102,
        // State 129
        0, 0, 0, -45, -45, 0, 0, 0, -45, -45, 0, -45, 0, -45, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, -45, -45, 0, -45, 0, -45, -45, -45, 0, 0, -45, -45, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, -65, -65, 0, 0, -65, 0, 0, 0, -65, -65, 0, -65, 0, 0, -65, -65, 0, 0, 0, -65, -65, 0, 0, 0, 0, -65, 0, 0, 0, -65, -65, 0, 0, 0, -65, 0, -65, 0, 0, 0, 0, 0, 0, -65,
        // State 131
        0, 0, 0, 0, 0, 0, -58, -58, 0, 0, -58, 0, 0, 0, -58, -58, -58, -58, 0, 0, -58, -58, 0, 0, 0, -58, -58, 0, 0, 0, 0, -58, 0, 0, 0, 0, -58, 0, 0, 0, -58, 0, -58, 0, 0, 0, 0, 0, 0, -58,
        // State 132
        0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, -5, -5, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, -5, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, -135, -135, -135, 0, 0, -135, -135, 0, -135, 0, -135, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, -135, -135, 0, -135, 0, -135, -135, -135, 0, 0, -135, -135, -135, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, -32, -32, 0, 0, -32, 0, 40, 0, -32, -32, -32, -32, 0, 0, -32, -32, 0, 0, 0, -32, -32, 0, 0, 0, 0, -32, 0, 0, 0, -32, -32, 0, 0, 0, -32, 0, -32, 0, 0, 0, 0, 0, 0, -32,
        // State 139
        0, 0, 0, 0, 0, -127, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, -129, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, -126, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, -125, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, -128, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, -141, -141, 0, 0, -141, 0, 0, 0, -141, -141, -141, -141, 0, 0, -141, -141, 0, 0, 0, -141, -141, 0, 0, 0, 0, -141, 0, 0, 0, -141, -141, 0, 0, 0, -141, 0, -141, 0, 0, 0, 0, 0, 0, -141,
        // State 145
        0, 0, 0, 0, 0, 0, -17, -17, 0, 0, -17, 0, 0, 0, -17, -17, -17, -17, 0, 0, -17, -17, 0, 0, 0, -17, -17, 0, 0, 0, 0, -17, 0, 0, 0, -17, -17, 0, 0, 0, -17, 0, -17, 0, 0, 0, 0, 0, 0, -17,
        // State 146
        0, 0, 0, 0, 0, 0, -18, -18, 0, 0, -18, 0, 0, 0, -18, -18, -18, -18, 0, 0, -18, -18, 0, 0, 0, -18, -18, 0, 0, 0, 0, -18, 0, 0, 0, -18, -18, 0, 0, 0, -18, 0, -18, 0, 0, 0, 0, 0, 0, -18,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, -113, -113, 0, 0, -113, 0, 0, 0, -113, -113, 0, -113, 0, 0, -113, -113, 0, 0, 0, 0, -113, 0, 0, 0, 0, -113, 0, 0, 0, -113, -113, 0, 0, 0, -113, 0, -113, 0, 0, 0, 0, 0, 0, -113,
        // State 152
        0, 0, 0, 0, 0, 0, -116, -116, 0, 0, -116, 0, -116, 0, -116, -116, -116, -116, 0, 0, -116, -116, 0, 0, 0, -116, -116, 0, 0, 0, 0, -116, 0, 0, 0, -116, -116, 0, 0, 0, -116, 0, -116, 0, 0, 0, 0, 0, 0, -116,
        // State 153
        0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, -134, -134, 0, 0, -134, 0, 0, 0, -134, -134, -134, -134, 0, 0, -134, -134, 0, 0, 0, -134, -134, 0, 0, 0, 0, -134, 0, 0, 0, -134, -134, 0, 0, 0, -134, 0, -134, 0, 0, 0, 0, 0, 0, -134,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        0, 0, 0, 0, 0, 0, -52, -52, 0, 0, -52, 0, 0, 0, -52, -52, -52, -52, 0, 0, -52, -52, 0, 0, 0, -52, -52, 0, 0, 0, 0, -52, 0, 0, 0, -52, -52, 0, 0, 0, -52, 0, -52, 0, 0, 0, 0, 0, 0, -52,
        // State 157
        0, 0, 0, -136, -136, -136, 0, 0, -136, -136, 0, -136, 0, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, -136, -136, 0, -136, 0, -136, -136, -136, 0, 0, -136, -136, -136, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, -38, -38, 0, 0, -38, 0, 0, 0, -38, -38, -38, -38, 0, 0, -38, -38, 0, 0, 0, -38, -38, 0, 0, 0, 0, -38, 0, 0, 0, -38, -38, 0, 0, 0, -38, 0, -38, 0, 0, 0, 0, 0, 0, -38,
        // State 159
        0, 0, 0, 0, 0, 0, -31, -31, 0, 0, -31, 0, 0, 0, -31, -31, -31, -31, 0, 0, -31, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, -31, 0, -31, 0, 0, 0, 0, 0, 0, -31,
        // State 160
        0, 0, 0, 0, 0, 0, -39, -39, 0, 0, -39, 0, 0, 0, -39, -39, -39, -39, 0, 0, -39, -39, 0, 0, 0, -39, -39, 0, 0, 0, 0, -39, 0, 0, 0, -39, -39, 0, 0, 0, -39, 0, -39, 0, 0, 0, 0, 0, 0, -39,
        // State 161
        0, 0, 0, 0, 0, 0, -114, -114, 0, 0, -114, 0, 0, 0, -114, -114, 0, -114, 0, 0, -114, -114, 0, 0, 0, 0, -114, 0, 0, 0, 0, -114, 0, 0, 0, -114, -114, 0, 0, 0, -114, 0, -114, 0, 0, 0, 0, 0, 0, -114,
        // State 162
        0, 0, 0, 0, 0, 0, -117, -117, 0, 0, -117, 0, -117, 0, -117, -117, -117, -117, 0, 0, -117, -117, 0, 0, 0, -117, -117, 0, 0, 0, 0, -117, 0, 0, 0, -117, -117, 0, 0, 0, -117, 0, -117, 0, 0, 0, 0, 0, 0, -117,
        // State 163
        0, 0, 0, 0, 0, 0, -133, -133, 0, 0, -133, 0, 0, 0, -133, -133, -133, -133, 0, 0, -133, -133, 0, 0, 0, -133, -133, 0, 0, 0, 0, -133, 0, 0, 0, -133, -133, 0, 0, 0, -133, 0, -133, 0, 0, 0, 0, 0, 0, -133,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, -132, -132, 0, 0, -132, 0, 0, 0, -132, -132, -132, -132, 0, 0, -132, -132, 0, 0, 0, -132, -132, 0, 0, 0, 0, -132, 0, 0, 0, -132, -132, 0, 0, 0, -132, 0, -132, 0, 0, 0, 0, 0, 0, -132,
        // State 168
        0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, -131, -131, 0, 0, -131, 0, 0, 0, -131, -131, -131, -131, 0, 0, -131, -131, 0, 0, 0, -131, -131, 0, 0, 0, 0, -131, 0, 0, 0, -131, -131, 0, 0, 0, -131, 0, -131, 0, 0, 0, 0, 0, 0, -131,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 50 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -100,
        // State 1
        0,
        // State 2
        0,
        // State 3
        -101,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        -107,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        -94,
        // State 51
        -69,
        // State 52
        0,
        // State 53
        -74,
        // State 54
        0,
        // State 55
        0,
        // State 56
        -110,
        // State 57
        0,
        // State 58
        -108,
        // State 59
        -142,
        // State 60
        -109,
        // State 61
        0,
        // State 62
        -70,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        -71,
        // State 67
        0,
        // State 68
        -95,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        -87,
        // State 80
        0,
        // State 81
        -56,
        // State 82
        -75,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        -86,
        // State 94
        -84,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        -85,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        -57,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        -102,
        // State 129
        0,
        // State 130
        0,
        // State 131
        -58,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        -32,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        -141,
        // State 145
        -17,
        // State 146
        -18,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        -116,
        // State 153
        0,
        // State 154
        -134,
        // State 155
        0,
        // State 156
        -52,
        // State 157
        0,
        // State 158
        -38,
        // State 159
        -31,
        // State 160
        -39,
        // State 161
        0,
        // State 162
        -117,
        // State 163
        -133,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        -132,
        // State 168
        0,
        // State 169
        -131,
        // State 170
        0,
        // State 171
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 21,
            5 => 27,
            10 => match state {
                38 => 156,
                _ => 144,
            },
            11 => 45,
            12 => match state {
                24 => 129,
                _ => 107,
            },
            13 => 95,
            14 => 96,
            15 => 121,
            16 => match state {
                39 => 158,
                _ => 46,
            },
            17 => 47,
            18 => 153,
            20 => 159,
            21 => match state {
                8 => 97,
                10 => 102,
                11 => 104,
                12 => 105,
                13 => 106,
                20 => 117,
                21 => 118,
                23 | 34 => 125,
                28 => 136,
                33 => 149,
                41 => 164,
                42 => 165,
                43 => 166,
                44 => 170,
                _ => 48,
            },
            23 => 17,
            24 => match state {
                18 => 26,
                _ => 1,
            },
            25 => 18,
            26 => 49,
            27 => 2,
            28 => 50,
            29 => match state {
                27 => 133,
                _ => 122,
            },
            31 => 51,
            32 => 81,
            33 => 52,
            34 => match state {
                25 => 130,
                _ => 110,
            },
            36 => 25,
            37 => 123,
            39 => match state {
                3 => 82,
                _ => 53,
            },
            41 => 3,
            42 => 108,
            43 => match state {
                34 => 150,
                _ => 126,
            },
            44 => 54,
            45 => 55,
            46 => 56,
            47 => match state {
                17 => 115,
                _ => 57,
            },
            48 => 16,
            49 => 58,
            50 => match state {
                16 => 114,
                _ => 4,
            },
            51 => 19,
            52 => 14,
            53 => 59,
            54 => 60,
            55 => 61,
            56 => match state {
                15 | 25 => 111,
                31 | 38 => 145,
                35 => 151,
                40 => 161,
                _ => 62,
            },
            58 => 40,
            59 => 63,
            60 => match state {
                29 => 138,
                39 => 160,
                _ => 146,
            },
            61 => match state {
                19 => 116,
                _ => 64,
            },
            62 => 5,
            63 => 6,
            64 => 7,
            65 => match state {
                32 => 148,
                37 => 155,
                _ => 36,
            },
            66 => 65,
            67 => match state {
                15 | 25 => 112,
                _ => 66,
            },
            68 => 101,
            70 => match state {
                8 | 10..=13 | 16..=21 | 23 | 28 | 33..=34 | 41..=44 => 98,
                _ => 67,
            },
            71 => 68,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""for""###,
            r###""if""###,
            r###""while""###,
            r###"ADD"###,
            r###"AND"###,
            r###"ASSIGN"###,
            r###"BREAK"###,
            r###"CALL_ID"###,
            r###"COLON"###,
            r###"COMMA"###,
            r###"CONTINUE"###,
            r###"DIV"###,
            r###"ELSE"###,
            r###"EQUAL"###,
            r###"FALSE"###,
            r###"FLOAT"###,
            r###"FN"###,
            r###"FOR"###,
            r###"FORWARD"###,
            r###"GT"###,
            r###"ID"###,
            r###"IF"###,
            r###"IN"###,
            r###"LBRACKET"###,
            r###"LCBRACKET"###,
            r###"LET"###,
            r###"LPAREN"###,
            r###"LT"###,
            r###"MUL"###,
            r###"NOT"###,
            r###"NOTEQUAL"###,
            r###"NUMBER"###,
            r###"OR"###,
            r###"PIPE"###,
            r###"RBRACKET"###,
            r###"RCBRACKET"###,
            r###"RETURN"###,
            r###"RLBRACKET"###,
            r###"RPAREN"###,
            r###"SEMICOLON"###,
            r###"STRING"###,
            r###"SUB"###,
            r###"TRUE"###,
            r###"T_BOOl"###,
            r###"T_DATAFRAME"###,
            r###"T_FLOAT"###,
            r###"T_INT"###,
            r###"T_STR"###,
            r###"T_VOID"###,
            r###"WHILE"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input, 'm>
    where 
    {
        input: &'input str,
        __phantom: core::marker::PhantomData<(&'input (), &'m ())>,
    }
    impl<'input, 'm> __state_machine::ParserDefinition for __StateMachine<'input, 'm>
    where 
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Program;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 50 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
        'm,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(35, _) if true => Some(0),
            Token(37, _) if true => Some(1),
            Token(45, _) if true => Some(2),
            Token(14, _) if true => Some(3),
            Token(10, _) if true => Some(4),
            Token(21, _) if true => Some(5),
            Token(29, _) if true => Some(6),
            Token(0, _) if true => Some(7),
            Token(18, _) if true => Some(8),
            Token(15, _) if true => Some(9),
            Token(30, _) if true => Some(10),
            Token(17, _) if true => Some(11),
            Token(31, _) if true => Some(12),
            Token(22, _) if true => Some(13),
            Token(32, _) if true => Some(14),
            Token(3, _) if true => Some(15),
            Token(34, _) if true => Some(16),
            Token(5, _) if true => Some(17),
            Token(36, _) if true => Some(18),
            Token(23, _) if true => Some(19),
            Token(4, _) if true => Some(20),
            Token(6, _) if true => Some(21),
            Token(38, _) if true => Some(22),
            Token(25, _) if true => Some(23),
            Token(46, _) if true => Some(24),
            Token(40, _) if true => Some(25),
            Token(11, _) if true => Some(26),
            Token(20, _) if true => Some(27),
            Token(13, _) if true => Some(28),
            Token(8, _) if true => Some(29),
            Token(9, _) if true => Some(30),
            Token(2, _) if true => Some(31),
            Token(48, _) if true => Some(32),
            Token(47, _) if true => Some(33),
            Token(26, _) if true => Some(34),
            Token(49, _) if true => Some(35),
            Token(41, _) if true => Some(36),
            Token(27, _) if true => Some(37),
            Token(12, _) if true => Some(38),
            Token(19, _) if true => Some(39),
            Token(1, _) if true => Some(40),
            Token(16, _) if true => Some(41),
            Token(43, _) if true => Some(42),
            Token(28, _) if true => Some(43),
            Token(24, _) if true => Some(44),
            Token(33, _) if true => Some(45),
            Token(39, _) if true => Some(46),
            Token(42, _) if true => Some(47),
            Token(44, _) if true => Some(48),
            Token(7, _) if true => Some(49),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'm,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 => match __token {
                Token(35, __tok0) | Token(37, __tok0) | Token(45, __tok0) | Token(14, __tok0) | Token(10, __tok0) | Token(21, __tok0) | Token(29, __tok0) | Token(0, __tok0) | Token(18, __tok0) | Token(15, __tok0) | Token(30, __tok0) | Token(17, __tok0) | Token(31, __tok0) | Token(22, __tok0) | Token(32, __tok0) | Token(3, __tok0) | Token(34, __tok0) | Token(5, __tok0) | Token(36, __tok0) | Token(23, __tok0) | Token(4, __tok0) | Token(6, __tok0) | Token(38, __tok0) | Token(25, __tok0) | Token(46, __tok0) | Token(40, __tok0) | Token(11, __tok0) | Token(20, __tok0) | Token(13, __tok0) | Token(8, __tok0) | Token(9, __tok0) | Token(2, __tok0) | Token(48, __tok0) | Token(47, __tok0) | Token(26, __tok0) | Token(49, __tok0) | Token(41, __tok0) | Token(27, __tok0) | Token(12, __tok0) | Token(19, __tok0) | Token(1, __tok0) | Token(16, __tok0) | Token(43, __tok0) | Token(28, __tok0) | Token(24, __tok0) | Token(33, __tok0) | Token(39, __tok0) | Token(42, __tok0) | Token(44, __tok0) | Token(7, __tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct PProgramParser {
        builder: __lalrpop_util::lexer::MatcherBuilder,
        _priv: (),
    }

    impl PProgramParser {
        pub fn new() -> PProgramParser {
            let __builder = super::__intern_token::new_builder();
            PProgramParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'm,
        >(
            &self,
            input: &'input str,
        ) -> Result<Program, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    __phantom: core::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
        'm,
    >(
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> Option<Result<Program,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                __reduce5(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            6 => {
                __reduce6(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                __reduce33(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            34 => {
                __reduce34(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                __reduce49(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            50 => {
                __reduce50(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                __reduce60(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            61 => {
                __reduce61(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                __reduce84(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            85 => {
                __reduce85(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                __reduce98(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            99 => {
                __reduce99(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            100 => {
                __reduce100(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                __reduce113(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            114 => {
                __reduce114(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            115 => {
                __reduce115(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                __reduce117(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            118 => {
                __reduce118(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            119 => {
                __reduce119(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                __reduce123(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            124 => {
                __reduce124(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                __reduce129(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            130 => {
                __reduce130(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            135 => {
                __reduce135(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            136 => {
                __reduce136(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            137 => {
                __reduce137(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            138 => {
                __reduce138(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            139 => {
                __reduce139(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            140 => {
                __reduce140(input, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            141 => {
                // __PProgram = PProgram => ActionFn(0);
                let __sym0 = __pop_Variant23(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Access, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Block, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Box<Expression>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Call, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Const, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, DataType, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Dimension, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Expression, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Function, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, FunctionParam, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, FunctionSignature, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Index, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Operator, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Program, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Statement, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Variable, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Box<Expression>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<FunctionParam>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Index>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Box<Expression>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<FunctionParam>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, alloc::vec::Vec<Statement>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Block>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Box<Expression>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Dimension>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<FunctionParam>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, core::option::Option<Vec<Index>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PExpr> COMMA) = PExpr, COMMA => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PExpr> COMMA)* =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action110::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PExpr> COMMA)* = (<PExpr> COMMA)+ => ActionFn(111);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PExpr> COMMA)+ = PExpr, COMMA => ActionFn(128);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action128::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PExpr> COMMA)+ = (<PExpr> COMMA)+, PExpr, COMMA => ActionFn(129);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action129::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PFuncParam> COMMA) = PFuncParam, COMMA => ActionFn(117);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action117::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PFuncParam> COMMA)* =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action115::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PFuncParam> COMMA)* = (<PFuncParam> COMMA)+ => ActionFn(116);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PFuncParam> COMMA)+ = PFuncParam, COMMA => ActionFn(132);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (<PFuncParam> COMMA)+ = (<PFuncParam> COMMA)+, PFuncParam, COMMA => ActionFn(133);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 5)
    }
    pub(crate) fn __reduce10<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ASSIGN <PExpr>) = ASSIGN, PExpr => ActionFn(105);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action105::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ASSIGN <PExpr>)? = ASSIGN, PExpr => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action136::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ASSIGN <PExpr>)? =  => ActionFn(104);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action104::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce13<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ELSE <PElseBlock>) = ELSE, PElseBlock => ActionFn(89);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action89::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ELSE <PElseBlock>)? = ELSE, PElseBlock => ActionFn(139);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action139::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    pub(crate) fn __reduce15<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // (ELSE <PElseBlock>)? =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce16<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PBlock = PStatement => ActionFn(68);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce17<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PBlock = PStrictBlock => ActionFn(69);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce18<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PBool = TRUE => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PBool = FALSE => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce20<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PBoxed<PId> = PId => ActionFn(94);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce21<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PCallParams = PComma<PExpr> => ActionFn(52);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce22<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PExpr> = PExpr => ActionFn(146);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action146::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce23<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PExpr> =  => ActionFn(147);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action147::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 14)
    }
    pub(crate) fn __reduce24<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PExpr> = (<PExpr> COMMA)+, PExpr => ActionFn(148);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action148::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce25<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PExpr> = (<PExpr> COMMA)+ => ActionFn(149);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action149::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce26<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PFuncParam> = PFuncParam => ActionFn(150);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action150::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce27<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PFuncParam> =  => ActionFn(151);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action151::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce28<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PFuncParam> = (<PFuncParam> COMMA)+, PFuncParam => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action152::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce29<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PComma<PFuncParam> = (<PFuncParam> COMMA)+ => ActionFn(153);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action153::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce30<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PCondition = IF, PExpr, RPAREN, PStrictBlock, ELSE, PElseBlock => ActionFn(140);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant6(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action140::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (6, 16)
    }
    pub(crate) fn __reduce31<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PCondition = IF, PExpr, RPAREN, PStrictBlock => ActionFn(141);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action141::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 16)
    }
    pub(crate) fn __reduce32<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PConst = PSimpleConst => ActionFn(17);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce33<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PDimension = LBRACKET, PExpr, RLBRACKET, PExpr, RBRACKET => ActionFn(21);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action21::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 18)
    }
    pub(crate) fn __reduce34<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PDimension = LBRACKET, PExpr, RBRACKET => ActionFn(22);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action22::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 18)
    }
    pub(crate) fn __reduce35<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PDimension? = PDimension => ActionFn(106);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action106::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce36<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PDimension? =  => ActionFn(107);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action107::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce37<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PElseBlock = PCondition => ActionFn(74);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PElseBlock = PStrictBlock => ActionFn(75);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce39<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PExpr = PTier<PExprOp, PLogicExpr> => ActionFn(39);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce40<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PExpr? = PExpr => ActionFn(108);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce41<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PExpr? =  => ActionFn(109);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action109::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 22)
    }
    pub(crate) fn __reduce42<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PExprOp = AND => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce43<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PExprOp = OR => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce44<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFactor = PFactor, PPipeOp, FORWARD, PBoxed<PId> => ActionFn(44);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action44::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce45<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFactor = PFactor, PPipeOp, PBoxed<PId> => ActionFn(45);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action45::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 24)
    }
    pub(crate) fn __reduce46<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFactor = PItem => ActionFn(46);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce47<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFactorOp = MUL => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce48<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFactorOp = DIV => ActionFn(37);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce49<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFloat = FLOAT => ActionFn(9);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce50<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFnSignature = FN, CALL_ID, PFunctionParams, RPAREN, COLON, PType => ActionFn(54);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action54::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 27)
    }
    pub(crate) fn __reduce51<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PForLoop = FOR, ID, IN, PExpr, RPAREN, PBlock => ActionFn(80);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant6(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action80::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (6, 28)
    }
    pub(crate) fn __reduce52<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFuncParam = ID, COLON, PType => ActionFn(51);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action51::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce53<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFuncParam? = PFuncParam => ActionFn(113);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce54<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFuncParam? =  => ActionFn(114);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action114::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce55<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunction = PFnSignature, PFunctionBlock => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce56<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionBlock = LCBRACKET, RCBRACKET => ActionFn(154);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action154::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce57<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionBlock = LCBRACKET, PFunctionItem+, RCBRACKET => ActionFn(155);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action155::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 32)
    }
    pub(crate) fn __reduce58<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionCall = CALL_ID, PCallParams, RPAREN => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce59<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem = PStatement => ActionFn(55);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce60<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem = PVarDeclaration => ActionFn(56);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce61<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 35)
    }
    pub(crate) fn __reduce62<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem* = PFunctionItem+ => ActionFn(91);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce63<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem+ = PFunctionItem => ActionFn(118);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce64<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionItem+ = PFunctionItem+, PFunctionItem => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action119::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce65<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionParams = PComma<PFuncParam> => ActionFn(53);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce66<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionType = PType => ActionFn(6);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce67<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PFunctionType = T_VOID => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce68<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement = PFunction => ActionFn(65);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce69<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement = PStatement => ActionFn(66);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce70<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement = PVarDeclaration => ActionFn(67);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce71<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement* =  => ActionFn(83);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action83::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce72<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement* = PGlobalStatement+ => ActionFn(84);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce73<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement+ = PGlobalStatement => ActionFn(122);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce74<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PGlobalStatement+ = PGlobalStatement+, PGlobalStatement => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce75<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PId = ID => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce76<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PIndexing = PExpr, COLON, PExpr => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action19::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 43)
    }
    pub(crate) fn __reduce77<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PIndexing = PExpr => ActionFn(20);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce78<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PInt = NUMBER => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce79<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PItem = PVarReference => ActionFn(47);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce80<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PItem = PConst => ActionFn(48);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce81<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PItem = LPAREN, PExpr, RPAREN => ActionFn(49);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action49::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 45)
    }
    pub(crate) fn __reduce82<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PItem = PFunctionCall => ActionFn(50);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action50::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce83<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLineStatement = BREAK, SEMICOLON => ActionFn(70);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action70::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 46)
    }
    pub(crate) fn __reduce84<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLineStatement = CONTINUE, SEMICOLON => ActionFn(71);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action71::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 46)
    }
    pub(crate) fn __reduce85<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLineStatement = PVarAssignment, SEMICOLON => ActionFn(72);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action72::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 46)
    }
    pub(crate) fn __reduce86<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLineStatement = PExpr, SEMICOLON => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 46)
    }
    pub(crate) fn __reduce87<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicExpr = PMathExpr, PLogicOp, PMathExpr => ActionFn(40);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action40::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 47)
    }
    pub(crate) fn __reduce88<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicExpr = PMathExpr => ActionFn(41);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce89<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicOp = LT => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce90<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicOp = GT => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce91<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicOp = NOTEQUAL => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce92<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLogicOp = EQUAL => ActionFn(33);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce93<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLoop = PForLoop => ActionFn(78);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce94<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PLoop = PWhileLoop => ActionFn(79);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce95<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PMathExpr = PTier<PMathOp, PTerm> => ActionFn(42);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce96<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PMathOp = ADD => ActionFn(34);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce97<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PMathOp = SUB => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce98<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PPipeOp = PIPE => ActionFn(38);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce99<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PProgram =  => ActionFn(156);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action156::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 53)
    }
    pub(crate) fn __reduce100<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PProgram = PGlobalStatement+ => ActionFn(157);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce101<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PReturnStatement = RETURN, PExpr, SEMICOLON => ActionFn(60);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action60::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 54)
    }
    pub(crate) fn __reduce102<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PSimpleConst = PInt => ActionFn(13);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce103<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PSimpleConst = PStr => ActionFn(14);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce104<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PSimpleConst = PFloat => ActionFn(15);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce105<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PSimpleConst = PBool => ActionFn(16);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce106<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement = PCondition => ActionFn(61);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce107<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement = PLoop => ActionFn(62);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce108<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement = PReturnStatement => ActionFn(63);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce109<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement = PLineStatement => ActionFn(64);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce110<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement* =  => ActionFn(85);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action85::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 57)
    }
    pub(crate) fn __reduce111<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement* = PStatement+ => ActionFn(86);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce112<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement+ = PStatement => ActionFn(120);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce113<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStatement+ = PStatement+, PStatement => ActionFn(121);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action121::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 58)
    }
    pub(crate) fn __reduce114<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStr = STRING => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce115<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStrictBlock = LCBRACKET, RCBRACKET => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action158::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 60)
    }
    pub(crate) fn __reduce116<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PStrictBlock = LCBRACKET, PStatement+, RCBRACKET => ActionFn(159);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action159::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 60)
    }
    pub(crate) fn __reduce117<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTerm = PTier<PFactorOp, PFactor> => ActionFn(43);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce118<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PExprOp, PLogicExpr> = PTier<PExprOp, PLogicExpr>, PExprOp, PLogicExpr => ActionFn(99);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action99::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 62)
    }
    pub(crate) fn __reduce119<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PExprOp, PLogicExpr> = PLogicExpr => ActionFn(100);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce120<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PFactorOp, PFactor> = PTier<PFactorOp, PFactor>, PFactorOp, PFactor => ActionFn(95);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action95::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 63)
    }
    pub(crate) fn __reduce121<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PFactorOp, PFactor> = PFactor => ActionFn(96);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce122<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PMathOp, PTerm> = PTier<PMathOp, PTerm>, PMathOp, PTerm => ActionFn(97);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action97::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 64)
    }
    pub(crate) fn __reduce123<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PTier<PMathOp, PTerm> = PTerm => ActionFn(98);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce124<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PType = T_INT => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce125<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PType = T_FLOAT => ActionFn(2);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce126<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PType = T_BOOl => ActionFn(3);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce127<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PType = T_STR => ActionFn(4);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce128<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PType = T_DATAFRAME => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce129<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarAssignment = PVarReference, ASSIGN, PExpr => ActionFn(27);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action27::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 66)
    }
    pub(crate) fn __reduce130<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarDeclaration = LET, ID, COLON, PType, PDimension, ASSIGN, PExpr, SEMICOLON => ActionFn(142);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action142::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (8, 67)
    }
    pub(crate) fn __reduce131<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarDeclaration = LET, ID, COLON, PType, ASSIGN, PExpr, SEMICOLON => ActionFn(143);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action143::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (7, 67)
    }
    pub(crate) fn __reduce132<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarDeclaration = LET, ID, COLON, PType, PDimension, SEMICOLON => ActionFn(144);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action144::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 67)
    }
    pub(crate) fn __reduce133<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarDeclaration = LET, ID, COLON, PType, SEMICOLON => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 67)
    }
    pub(crate) fn __reduce134<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarRefIndex = LBRACKET, PIndexing, RBRACKET => ActionFn(24);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action24::<>(input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce135<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarRefIndex = LBRACKET, PIndexing, RLBRACKET, PIndexing, RBRACKET => ActionFn(25);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant22(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action25::<>(input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 68)
    }
    pub(crate) fn __reduce136<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarRefIndex? = PVarRefIndex => ActionFn(101);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce137<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarRefIndex? =  => ActionFn(102);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action102::<>(input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 69)
    }
    pub(crate) fn __reduce138<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarReference = ID, PVarRefIndex => ActionFn(160);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action160::<>(input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 70)
    }
    pub(crate) fn __reduce139<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PVarReference = ID => ActionFn(161);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action161::<>(input, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce140<
        'input,
        'm,
    >(
        input: &'input str,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: core::marker::PhantomData<(&'input (), &'m ())>,
    ) -> (usize, usize)
    {
        // PWhileLoop = WHILE, PExpr, RPAREN, PBlock => ActionFn(81);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action81::<>(input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 71)
    }
}
pub use self::__parse__PProgram::PProgramParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use std::str::FromStr;
    use crate::ast::{Dimension};
    use crate::ast::types::{DataType, Function, FunctionParam, Operator, Variable, FunctionSignature};
    use crate::ast::expressions::{Expression, Index};
    use crate::ast::expressions::constant::{Const, TypeConst};
    use crate::ast::expressions::id::{Access, Id};
    use crate::ast::expressions::operation::Operation;
    use crate::ast::expressions::call::Call;
    use crate::ast::statements::{Block, Program, Statement};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    pub fn new_builder() -> __lalrpop_util::lexer::MatcherBuilder {
        let __strs: &[(&str, bool)] = &[
            ("^([A-Z_a-z]+[0-9A-Z_a-z]*\\()", false),
            ("^(\"[\0-!\\#-\u{10ffff}]*\")", false),
            ("^([0-9]+)", false),
            ("^([0-9]+\\.[0-9]+)", false),
            ("^([A-Z_a-z]+[0-9A-Z_a-z]*)", false),
            ("^(for[\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}-\u{2029}\u{202f}\u{205f}\u{3000}]*\\()", false),
            ("^(if[\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}-\u{2029}\u{202f}\u{205f}\u{3000}]*\\()", false),
            ("^(while[\t-\r \u{85}\u{a0}\u{1680}\u{2000}-\u{200a}\u{2028}-\u{2029}\u{202f}\u{205f}\u{3000}]*\\()", false),
            ("^(!)", false),
            ("^(!=)", false),
            ("^(\\&\\&)", false),
            ("^(\\()", false),
            ("^(\\))", false),
            ("^(\\*)", false),
            ("^(\\+)", false),
            ("^(,)", false),
            ("^(\\-)", false),
            ("^(/)", false),
            ("^(:)", false),
            ("^(;)", false),
            ("^(<)", false),
            ("^(=)", false),
            ("^(==)", false),
            ("^(>)", false),
            ("^(DataFrame)", false),
            ("^(\\[)", false),
            ("^(\\])", false),
            ("^(\\]\\[)", false),
            ("^(bool)", false),
            ("^(break)", false),
            ("^(continue)", false),
            ("^(else)", false),
            ("^(false)", false),
            ("^(float)", false),
            ("^(fn)", false),
            ("^(for)", false),
            ("^(forward)", false),
            ("^(if)", false),
            ("^(in)", false),
            ("^(int)", false),
            ("^(let)", false),
            ("^(return)", false),
            ("^(str)", false),
            ("^(true)", false),
            ("^(void)", false),
            ("^(while)", false),
            ("^(\\{)", false),
            ("^(\\|>)", false),
            ("^(\\|\\|)", false),
            ("^(\\})", false),
            (r"^(\s*)", true),
        ];
        __lalrpop_util::lexer::MatcherBuilder::new(__strs.iter().copied()).unwrap()
    }
}
pub(crate) use self::__lalrpop_util::lexer::Token;

#[allow(unused_variables)]
fn __action0<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Program, usize),
) -> Program
{
    __0
}

#[allow(unused_variables)]
fn __action1<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::Int
}

#[allow(unused_variables)]
fn __action2<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::Float
}

#[allow(unused_variables)]
fn __action3<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::Bool
}

#[allow(unused_variables)]
fn __action4<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::String
}

#[allow(unused_variables)]
fn __action5<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::DataFrame
}

#[allow(unused_variables)]
fn __action6<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, DataType, usize),
) -> DataType
{
    __0
}

#[allow(unused_variables)]
fn __action7<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> DataType
{
    DataType::Void
}

#[allow(unused_variables)]
fn __action8<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Const
{
    Const::new(__0, DataType::Int)
}

#[allow(unused_variables)]
fn __action9<
    'input,
    'm,
>(
    input: &'input str,
    (_, f, _): (usize, &'input str, usize),
) -> Const
{
    Const::new(f, DataType::Float)
}

#[allow(unused_variables)]
fn __action10<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Const
{
    Const::new(__0, DataType::Bool)
}

#[allow(unused_variables)]
fn __action11<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Const
{
    Const::new(__0, DataType::Bool)
}

#[allow(unused_variables)]
fn __action12<
    'input,
    'm,
>(
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> Const
{
    Const::new(&s[1..s.len() - 1], DataType::String)
}

#[allow(unused_variables)]
fn __action13<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action14<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action15<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action16<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action17<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action18<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Expression
{
    Expression::Access(Access::new(
        Id::new(__0, None),
        vec![],
    ))
}

#[allow(unused_variables)]
fn __action19<
    'input,
    'm,
>(
    input: &'input str,
    (_, begin, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, end, _): (usize, Box<Expression>, usize),
) -> Index
{
    Index::Range(begin, end)
}

#[allow(unused_variables)]
fn __action20<
    'input,
    'm,
>(
    input: &'input str,
    (_, idx, _): (usize, Box<Expression>, usize),
) -> Index
{
    Index::Simple(idx)
}

#[allow(unused_variables)]
fn __action21<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, a, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, b, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Dimension
{
    Dimension(2, vec![a, b])
}

#[allow(unused_variables)]
fn __action22<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Dimension
{
    Dimension(1, vec![__0])
}

#[allow(unused_variables)]
fn __action23<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, id, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, data_type, _): (usize, DataType, usize),
    (_, dim, _): (usize, core::option::Option<Dimension>, usize),
    (_, value, _): (usize, core::option::Option<Box<Expression>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Variable
{
    Variable::new(
        String::from(id),
        data_type,
        dim.unwrap_or(Dimension(0, vec![])),
        value
    )
}

#[allow(unused_variables)]
fn __action24<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Index, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Vec<Index>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action25<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, a, _): (usize, Index, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, b, _): (usize, Index, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Vec<Index>
{
    vec![a, b]
}

#[allow(unused_variables)]
fn __action26<
    'input,
    'm,
>(
    input: &'input str,
    (_, id, _): (usize, &'input str, usize),
    (_, indexing, _): (usize, core::option::Option<Vec<Index>>, usize),
) -> Access
{
    Access::new(
            Id::new(id, None),
            indexing.unwrap_or(vec![])
        )
}

#[allow(unused_variables)]
fn __action27<
    'input,
    'm,
>(
    input: &'input str,
    (_, var, _): (usize, Access, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, exp, _): (usize, Box<Expression>, usize),
) -> Statement
{
    Statement::VarAssign(var, exp)
}

#[allow(unused_variables)]
fn __action28<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::And
}

#[allow(unused_variables)]
fn __action29<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Or
}

#[allow(unused_variables)]
fn __action30<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::LessThan
}

#[allow(unused_variables)]
fn __action31<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::GreaterThan
}

#[allow(unused_variables)]
fn __action32<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::NotEq
}

#[allow(unused_variables)]
fn __action33<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Eq
}

#[allow(unused_variables)]
fn __action34<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Add
}

#[allow(unused_variables)]
fn __action35<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Sub
}

#[allow(unused_variables)]
fn __action36<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Mul
}

#[allow(unused_variables)]
fn __action37<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Div
}

#[allow(unused_variables)]
fn __action38<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Operator
{
    Operator::Pipe
}

#[allow(unused_variables)]
fn __action39<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action40<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, __1, _): (usize, Operator, usize),
    (_, __2, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(__0, __1, __2)
            )
        )
}

#[allow(unused_variables)]
fn __action41<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action42<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action43<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action44<
    'input,
    'm,
>(
    input: &'input str,
    (_, factor, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, Operator, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, id, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(factor, Operator::ForwardPipe, id)
            )
        )
}

#[allow(unused_variables)]
fn __action45<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, __1, _): (usize, Operator, usize),
    (_, __2, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(__0, __1, __2)
            )
        )
}

#[allow(unused_variables)]
fn __action46<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action47<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Access, usize),
) -> Box<Expression>
{
    Box::new(Expression::Access(__0))
}

#[allow(unused_variables)]
fn __action48<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Const, usize),
) -> Box<Expression>
{
    Box::new(Expression::Const(__0))
}

#[allow(unused_variables)]
fn __action49<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action50<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Call, usize),
) -> Box<Expression>
{
    Box::new(Expression::Call(__0))
}

#[allow(unused_variables)]
fn __action51<
    'input,
    'm,
>(
    input: &'input str,
    (_, id, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, dtype, _): (usize, DataType, usize),
) -> FunctionParam
{
    FunctionParam(String::from(id), dtype)
}

#[allow(unused_variables)]
fn __action52<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<Box<Expression>>, usize),
) -> Vec<Box<Expression>>
{
    __0
}

#[allow(unused_variables)]
fn __action53<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<FunctionParam>, usize),
) -> Vec<FunctionParam>
{
    __0
}

#[allow(unused_variables)]
fn __action54<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, id, _): (usize, &'input str, usize),
    (_, params, _): (usize, Vec<FunctionParam>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, dtype, _): (usize, DataType, usize),
) -> FunctionSignature
{
    FunctionSignature {
    id:  String::from(&id[..id.len() - 1]),
    data_type: dtype,
    params: params
}
}

#[allow(unused_variables)]
fn __action55<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action56<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Variable, usize),
) -> Statement
{
    Statement::VarDeclaration(__0)
}

#[allow(unused_variables)]
fn __action57<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, statements, _): (usize, alloc::vec::Vec<Statement>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Block
{
    Block(statements)
}

#[allow(unused_variables)]
fn __action58<
    'input,
    'm,
>(
    input: &'input str,
    (_, signature, _): (usize, FunctionSignature, usize),
    (_, block, _): (usize, Block, usize),
) -> Function
{
    Function::new(signature, block)
}

#[allow(unused_variables)]
fn __action59<
    'input,
    'm,
>(
    input: &'input str,
    (_, id, _): (usize, &'input str, usize),
    (_, params, _): (usize, Vec<Box<Expression>>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Call
{
    Call::new(&id[..id.len() - 1], params)
}

#[allow(unused_variables)]
fn __action60<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Return(__0)
}

#[allow(unused_variables)]
fn __action61<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action62<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action63<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action64<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action65<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Function, usize),
) -> Statement
{
    Statement::FunctionDeclaration(__0)
}

#[allow(unused_variables)]
fn __action66<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action67<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Variable, usize),
) -> Statement
{
    Statement::VarDeclaration(__0)
}

#[allow(unused_variables)]
fn __action68<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Block
{
    Block(vec![__0])
}

#[allow(unused_variables)]
fn __action69<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Block, usize),
) -> Block
{
    __0
}

#[allow(unused_variables)]
fn __action70<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Break
}

#[allow(unused_variables)]
fn __action71<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
    (_, __1, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Continue
}

#[allow(unused_variables)]
fn __action72<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action73<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Statement
{
    Statement::Expression(__0)
}

#[allow(unused_variables)]
fn __action74<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Block
{
    Block(vec![__0])
}

#[allow(unused_variables)]
fn __action75<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Block, usize),
) -> Block
{
    __0
}

#[allow(unused_variables)]
fn __action76<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, condition, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, if_block, _): (usize, Block, usize),
    (_, else_block, _): (usize, core::option::Option<Block>, usize),
) -> Statement
{
    Statement::If {
            condition: condition,
            if_block: if_block,
            else_block: else_block
        }
}

#[allow(unused_variables)]
fn __action77<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, statements, _): (usize, alloc::vec::Vec<Statement>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Block
{
    Block(statements)
}

#[allow(unused_variables)]
fn __action78<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action79<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> Statement
{
    __0
}

#[allow(unused_variables)]
fn __action80<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, id, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, iterable, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, block, _): (usize, Block, usize),
) -> Statement
{
    Statement::For {
        iterator_id: String::from(id),
        iterable: iterable,
        block: block
    }
}

#[allow(unused_variables)]
fn __action81<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, condition, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, block, _): (usize, Block, usize),
) -> Statement
{
    Statement::While {
        condition: condition,
        block: block
    }
}

#[allow(unused_variables)]
fn __action82<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, alloc::vec::Vec<Statement>, usize),
) -> Program
{
    Program(__0)
}

#[allow(unused_variables)]
fn __action83<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action84<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
) -> alloc::vec::Vec<Statement>
{
    v
}

#[allow(unused_variables)]
fn __action85<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action86<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
) -> alloc::vec::Vec<Statement>
{
    v
}

#[allow(unused_variables)]
fn __action87<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Block, usize),
) -> core::option::Option<Block>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action88<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Block>
{
    None
}

#[allow(unused_variables)]
fn __action89<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Block, usize),
) -> Block
{
    __0
}

#[allow(unused_variables)]
fn __action90<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action91<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
) -> alloc::vec::Vec<Statement>
{
    v
}

#[allow(unused_variables)]
fn __action92<
    'input,
    'm,
>(
    input: &'input str,
    (_, mut vec, _): (usize, alloc::vec::Vec<FunctionParam>, usize),
    (_, c, _): (usize, core::option::Option<FunctionParam>, usize),
) -> Vec<FunctionParam>
{
    match c {
        None => vec,
        Some(c) => {
            vec.push(c);
            vec
        }
    }
}

#[allow(unused_variables)]
fn __action93<
    'input,
    'm,
>(
    input: &'input str,
    (_, mut vec, _): (usize, alloc::vec::Vec<Box<Expression>>, usize),
    (_, c, _): (usize, core::option::Option<Box<Expression>>, usize),
) -> Vec<Box<Expression>>
{
    match c {
        None => vec,
        Some(c) => {
            vec.push(c);
            vec
        }
    }
}

#[allow(unused_variables)]
fn __action94<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Expression, usize),
) -> Box<Expression>
{
    Box::new(__0)
}

#[allow(unused_variables)]
fn __action95<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, __1, _): (usize, Operator, usize),
    (_, __2, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(__0, __1, __2)
            )
        )
}

#[allow(unused_variables)]
fn __action96<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action97<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, __1, _): (usize, Operator, usize),
    (_, __2, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(__0, __1, __2)
            )
        )
}

#[allow(unused_variables)]
fn __action98<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action99<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, __1, _): (usize, Operator, usize),
    (_, __2, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    Box::new(
            Expression::Op(
                Operation::new(__0, __1, __2)
            )
        )
}

#[allow(unused_variables)]
fn __action100<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action101<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Vec<Index>, usize),
) -> core::option::Option<Vec<Index>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action102<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Vec<Index>>
{
    None
}

#[allow(unused_variables)]
fn __action103<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> core::option::Option<Box<Expression>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action104<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Box<Expression>>
{
    None
}

#[allow(unused_variables)]
fn __action105<
    'input,
    'm,
>(
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, __0, _): (usize, Box<Expression>, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action106<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Dimension, usize),
) -> core::option::Option<Dimension>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action107<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Dimension>
{
    None
}

#[allow(unused_variables)]
fn __action108<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> core::option::Option<Box<Expression>>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action109<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<Box<Expression>>
{
    None
}

#[allow(unused_variables)]
fn __action110<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Box<Expression>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action111<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expression>>, usize),
) -> alloc::vec::Vec<Box<Expression>>
{
    v
}

#[allow(unused_variables)]
fn __action112<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Box<Expression>
{
    __0
}

#[allow(unused_variables)]
fn __action113<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, FunctionParam, usize),
) -> core::option::Option<FunctionParam>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action114<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<FunctionParam>
{
    None
}

#[allow(unused_variables)]
fn __action115<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<FunctionParam>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action116<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<FunctionParam>, usize),
) -> alloc::vec::Vec<FunctionParam>
{
    v
}

#[allow(unused_variables)]
fn __action117<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, FunctionParam, usize),
    (_, _, _): (usize, &'input str, usize),
) -> FunctionParam
{
    __0
}

#[allow(unused_variables)]
fn __action118<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action119<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
    (_, e, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action120<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action121<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
    (_, e, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action122<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action123<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Statement>, usize),
    (_, e, _): (usize, Statement, usize),
) -> alloc::vec::Vec<Statement>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action124<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, FunctionParam, usize),
) -> alloc::vec::Vec<FunctionParam>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action125<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<FunctionParam>, usize),
    (_, e, _): (usize, FunctionParam, usize),
) -> alloc::vec::Vec<FunctionParam>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action126<
    'input,
    'm,
>(
    input: &'input str,
    (_, __0, _): (usize, Box<Expression>, usize),
) -> alloc::vec::Vec<Box<Expression>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action127<
    'input,
    'm,
>(
    input: &'input str,
    (_, v, _): (usize, alloc::vec::Vec<Box<Expression>>, usize),
    (_, e, _): (usize, Box<Expression>, usize),
) -> alloc::vec::Vec<Box<Expression>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action128<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, Box<Expression>, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<Box<Expression>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action112(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action129<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expression>>, usize),
    __1: (usize, Box<Expression>, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<Box<Expression>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action112(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action130<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, core::option::Option<Box<Expression>>, usize),
) -> Vec<Box<Expression>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action110(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action131<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expression>>, usize),
    __1: (usize, core::option::Option<Box<Expression>>, usize),
) -> Vec<Box<Expression>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action111(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action132<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, FunctionParam, usize),
    __1: (usize, &'input str, usize),
) -> alloc::vec::Vec<FunctionParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action117(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action133<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<FunctionParam>, usize),
    __1: (usize, FunctionParam, usize),
    __2: (usize, &'input str, usize),
) -> alloc::vec::Vec<FunctionParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action117(
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action134<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, core::option::Option<FunctionParam>, usize),
) -> Vec<FunctionParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action115(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action135<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<FunctionParam>, usize),
    __1: (usize, core::option::Option<FunctionParam>, usize),
) -> Vec<FunctionParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action116(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action136<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Box<Expression>, usize),
) -> core::option::Option<Box<Expression>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action105(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action137<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, core::option::Option<Dimension>, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Box<Expression>, usize),
    __7: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __5.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action136(
        input,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
fn __action138<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, core::option::Option<Dimension>, usize),
    __5: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action104(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action139<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Block, usize),
) -> core::option::Option<Block>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action89(
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action140<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Box<Expression>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Block, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Block, usize),
) -> Statement
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action139(
        input,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action76(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action141<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Box<Expression>, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, Block, usize),
) -> Statement
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action88(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action76(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action142<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, Dimension, usize),
    __5: (usize, &'input str, usize),
    __6: (usize, Box<Expression>, usize),
    __7: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action106(
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
fn __action143<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Box<Expression>, usize),
    __6: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action107(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
fn __action144<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, Dimension, usize),
    __5: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action106(
        input,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action145<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, &'input str, usize),
    __3: (usize, DataType, usize),
    __4: (usize, &'input str, usize),
) -> Variable
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action107(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        input,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action146<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, Box<Expression>, usize),
) -> Vec<Box<Expression>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action108(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action147<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Box<Expression>>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action109(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action148<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expression>>, usize),
    __1: (usize, Box<Expression>, usize),
) -> Vec<Box<Expression>>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action108(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action149<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Box<Expression>>, usize),
) -> Vec<Box<Expression>>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action109(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action150<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, FunctionParam, usize),
) -> Vec<FunctionParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action113(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action151<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<FunctionParam>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action114(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action152<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<FunctionParam>, usize),
    __1: (usize, FunctionParam, usize),
) -> Vec<FunctionParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action113(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action153<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<FunctionParam>, usize),
) -> Vec<FunctionParam>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action114(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action154<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action90(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action155<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<Statement>, usize),
    __2: (usize, &'input str, usize),
) -> Block
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action91(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action156<
    'input,
    'm,
>(
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Program
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action83(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action82(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action157<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, alloc::vec::Vec<Statement>, usize),
) -> Program
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action84(
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action82(
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action158<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action85(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        input,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action159<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, alloc::vec::Vec<Statement>, usize),
    __2: (usize, &'input str, usize),
) -> Block
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action77(
        input,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action160<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, Vec<Index>, usize),
) -> Access
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action101(
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action161<
    'input,
    'm,
>(
    input: &'input str,
    __0: (usize, &'input str, usize),
) -> Access
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action102(
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        input,
        __0,
        __temp0,
    )
}

pub trait __ToTriple<'input, 'm, >
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>;
}

impl<'input, 'm, > __ToTriple<'input, 'm, > for (usize, Token<'input>, usize)
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 'm, > __ToTriple<'input, 'm, > for Result<(usize, Token<'input>, usize), &'static str>
{
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
