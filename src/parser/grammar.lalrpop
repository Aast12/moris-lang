use std::str::FromStr;
use crate::ast::{Expr, Operator, TypeConst};

grammar;

// Types

Int: TypeConst = r"[0-9]+" => TypeConst::Int(i32::from_str(<>).unwrap());

Float: TypeConst = <f: r"[0-9]+\.[0-9]+"> => TypeConst::Float(f.parse::<f32>().unwrap());

Bool: TypeConst = {
    "true" => TypeConst::Bool(true),
    "false" => TypeConst::Bool(false)
};

Str: TypeConst = {
    <s: r#""[^"]*""#> => TypeConst::String(String::from(&s[1..s.len()-1]))
};

Id: Box<Expr> = {
    r"[_a-zA-z]+[0-9_a-zA-z]*" => Box::new(Expr::Id(String::from(<>)))
};

// Operators

ExprOp: Operator = {
    "&&" => Operator::And,
    "||" => Operator::Or
};

LogicOp: Operator = {
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "!=" => Operator::NotEq,
    "==" => Operator::Eq,
};

MathOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
};

FactorOp: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
};

PipeOp: Operator = {
    "|>" => Operator::Pipe,
};

// Expressions

Tier<Operator, NextTerm>: Box<Expr> = {
    Tier<Operator, NextTerm> Operator NextTerm => Box::new(Expr::Op(<>)),
    NextTerm
}

pub Expr: Box<Expr> = Tier<ExprOp, LogicExpr>;

LogicExpr: Box<Expr> = {
    MathExpr LogicOp MathExpr => Box::new(Expr::Op(<>)),
    MathExpr,
};

MathExpr: Box<Expr> = Tier<MathOp, Term>;

Term: Box<Expr> = Tier<FactorOp, Factor>;

Factor: Box<Expr> = {
    <factor:Factor> PipeOp "forward" <id:Id> => Box::new(Expr::Op(factor, Operator::ForwardPipe, id)),
    Factor PipeOp Id => Box::new(Expr::Op(<>)),
    Item,
};

Item: Box<Expr> = {
    Int => Box::new(Expr::Const(<>)),
    Str => Box::new(Expr::Const(<>)),
    Float => Box::new(Expr::Const(<>)),
    Id,
    "(" <Expr> ")" => Box::new(Expr::ParenthOp(<>)),
};


