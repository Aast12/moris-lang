use std::str::FromStr;
use crate::ast::{Dimension, types::Variable, VarRef, FunctionParam, types::FunctionSignature};
use crate::ast;
use crate::ast::types;
// use crate::ast::expressions::Expr;
use crate::ast::expressions::{Expression, Index};
use crate::ast::expressions::constant::TypeConst;
use crate::ast::expressions::constant;
use crate::ast::types::DataType;
use crate::ast::expressions::operation;
use crate::ast::expressions::id::{Access, Id};
use crate::ast::expressions::call;


grammar<'m>;


// Macros

Comma<TItem>: Vec<TItem> = {
    <mut vec: (<TItem> COMMA)*> <c: TItem?> => match c {
        None => vec,
        Some(c) => {
            vec.push(c);
            vec
        }
    }
}

Boxed<T>: Box<T> = T => Box::new(<>);

// Types

Type: DataType = {
    T_INT => DataType::Int,
    T_FLOAT => DataType::Float,
    T_BOOl => DataType::Bool,
    T_STR => DataType::String,
    T_DATAFRAME => DataType::DataFrame,
}

FunctionType: DataType = {
    Type,
    T_VOID => DataType::Void
}

Int: constant::Const<'m> = NUMBER => constant::Const::new(<>, DataType::Int);

Float: constant::Const<'m> = <f: FLOAT> => constant::Const::new(<>, DataType::Float);

Bool: constant::Const<'m> = {
    TRUE => constant::Const::new(<>, DataType::Bool),
    FALSE => constant::Const::new(<>, DataType::Bool)
}

Str: constant::Const<'m> = <s: STRING> => constant::Const::new(&s[1..s.len() - 1], DataType::String);

// VectorConst: TypeConst = LBRACKET <Comma<Expr>> RBRACKET => TypeConst::Vector(<>);

SimpleConst = {
    Int,
    Str,
    Float,
    Bool
}

Const = {
    SimpleConst,
    //VectorConst
}

Id: Expression<'m> = ID => 
    Expression::Access(Access::new(
        Id::new(<>, None),
        None,
    ));

// Variables

Indexing: Index<'m> = {
    <begin:Expr> COLON <end:Expr> => Index::Range(begin, end),
    <idx:Expr> => Index::Simple(idx)
}

Dimension: Dimension<'m> = {
    LBRACKET <a: Expr> RLBRACKET <b: Expr> RBRACKET => Dimension(2, vec![a, b]),
    LBRACKET <Expr> RBRACKET => Dimension(1, vec![<>])
}

VarDeclaration: types::Variable<'m> = {
    LET <id: ID> COLON <data_type: Type> <dim: Dimension?> <value: (ASSIGN <Expr>)?> SEMICOLON => types::Variable {
        id: String::from(id),
        data_type,
        dimension: dim.unwrap_or(Dimension(0, vec![])),
        value
    }
}

// TODO Fix w custom tokenizer, allow multiple dimensions and raise error on higher than two
VarRefIndex: Vec<Index<'m>> = {
    LBRACKET <Indexing> RBRACKET  => vec![<>],
    LBRACKET <a:Indexing> RLBRACKET <b:Indexing> RBRACKET => vec![<>]
}

VarReference: VarRef<'m> = {
    <id: ID> <indexing: VarRefIndex?> => 
        VarRef {
            id: String::from(id),
            indexing
        } 
}

VarAssignment: ast::Statement<'m> = <var: VarReference> ASSIGN <exp: Expr> => ast::Statement::VarAssign(var, exp);


// Operators

ExprOp: types::Operator = {
    AND => types::Operator::And,
    OR => types::Operator::Or
}

LogicOp: types::Operator = {
    LT => types::Operator::LessThan,
    GT => types::Operator::GreaterThan,
    NOTEQUAL => types::Operator::NotEq,
    EQUAL => types::Operator::Eq,
}

MathOp: types::Operator = {
    ADD => types::Operator::Add,
    SUB => types::Operator::Sub,
}

FactorOp: types::Operator = {
    MUL => types::Operator::Mul,
    DIV => types::Operator::Div,
}

PipeOp: types::Operator = PIPE => types::Operator::Pipe;

// Expressions

Tier<Op, NextTerm>: Box<Expression<'m>> = {
    Tier<Op, NextTerm> Op NextTerm => 
        Box::new(
            Expression::Op(
                operation::Operation::new(<>)
            )
        ),
    NextTerm
}

Expr: Box<Expression<'m>> = Tier<ExprOp, LogicExpr>;

LogicExpr: Box<Expression<'m>> = {
    MathExpr LogicOp MathExpr => 
        Box::new(
            Expression::Op(
                operation::Operation::new(<>)
            )
        ),
    MathExpr,
}

MathExpr: Box<Expression<'m>> = Tier<MathOp, Term>;

Term: Box<Expression<'m>> = Tier<FactorOp, Factor>;

Factor: Box<Expression<'m>> = {
    <factor:Factor> PipeOp FORWARD <id:Boxed<Id>> => 
        Box::new(
            Expression::Op(
                operation::Operation::new(factor, types::Operator::ForwardPipe, id)
            )
        ),
    Factor PipeOp Boxed<Id> => 
        Box::new(
            Expression::Op(
                operation::Operation::new(<>)
            )
        ),
    Item,
}

Item: Box<Expression<'m>> = {
    VarReference => Box::new(Expression::VarRef(<>)),
    Const => Box::new(Expression::Const(<>)),
    LPAREN <Expr> RPAREN => <>,
    FunctionCall => Box::new(Expression::Call(<>))
}

// Functions


FuncParam: FunctionParam = <id: ID> COLON <dtype: Type> => FunctionParam(String::from(id), dtype);

CallParams = Comma<Expr>;

FunctionParams = Comma<FuncParam>;

FnSignature: types::FunctionSignature = FN <id: CALL_ID> <params: FunctionParams> RPAREN COLON <dtype: Type> => types::FunctionSignature {
    id:  String::from(&id[..id.len() - 1]),
    data_type: dtype,
    params: params
};

FunctionItem: ast::Statement<'m> = {
    Statement,
    VarDeclaration => ast::Statement::VarDeclaration(<>),
}

FunctionBlock: ast::Block<'m> = LCBRACKET <statements: FunctionItem*> RCBRACKET => ast::Block(statements);

Function: ast::Function<'m> = <signature: FnSignature> <block: FunctionBlock> => ast::Function {
    signature: signature,
    block: block
};

FunctionCall: call::Call<'m> = <id: CALL_ID> <params: CallParams> RPAREN => 
        call::Call::new(&id[..id.len() - 1], params);

ReturnStatement: ast::Statement<'m> = RETURN <Expr> SEMICOLON => ast::Statement::Return(<>);

Statement = {
    Condition,
    Loop,
    ReturnStatement,
    LineStatement,
}

GlobalStatement: ast::Statement<'m> = {
    Function => ast::Statement::FunctionDeclaration(<>),
    Statement,
    VarDeclaration =>  ast::Statement::VarDeclaration(<>)
}

Block: ast::Block<'m> = {
    Statement => ast::Block(vec![<>]),
    StrictBlock
}

LineStatement: ast::Statement<'m> = {
    <VarAssignment> SEMICOLON,
    <Expr> SEMICOLON => ast::Statement::Expression(<>)
}

ElseBlock: ast::Block<'m> = {
    Condition => ast::Block(vec![<>]),
    StrictBlock
}

Condition: ast::Statement<'m> = {
    IF <condition: Expr> RPAREN <if_block: StrictBlock> <else_block: (ELSE <ElseBlock>)?> => 
        ast::Statement::If {
            condition: condition,
            if_block: if_block,
            else_block: else_block
        }
}

StrictBlock: ast::Block<'m> = LCBRACKET <statements: Statement*> RCBRACKET => ast::Block(statements);

Loop = {
    ForLoop,
    WhileLoop
}

ForLoop: ast::Statement<'m> = FOR <id: ID> IN <iterable: Expr> RPAREN <block: Block> =>
    ast::Statement::For {
        iterator_id: String::from(id),
        iterable: iterable,
        block: block
    };

WhileLoop: ast::Statement<'m> = WHILE <condition: Expr> RPAREN <block: Block> =>
    ast::Statement::While {
        condition: condition,
        block: block
    };

pub Program: ast::Program<'m> = GlobalStatement* => ast::Program(<>);

match {
    r#""[^"]*""# => STRING,
    "&&" => AND,
    "||" => OR,
    "<" => LT,
    ">" => GT,
    "!=" => NOTEQUAL,
    "==" => EQUAL,
    "+" => ADD,
    "-" => SUB,
    "*" => MUL,
    "/" => DIV,
    "|>" => PIPE,
    "forward" => FORWARD,
    "int" => T_INT,
    "float" => T_FLOAT,
    "bool" => T_BOOl,
    "str" => T_STR,
    "DataFrame" => T_DATAFRAME,
    "void" => T_VOID,
    "let" => LET,
    "true" => TRUE,
    "false" => FALSE,
    "fn" => FN,
    "return" => RETURN,
    "for",
    r"for\s*\(" => FOR, // TODO Fix joint ( w/ custom tokenizer,
    "while",
    r"while\s*\(" => WHILE,
    "in" => IN,
    "(" => LPAREN,
    ")" => RPAREN,
    "if",
    r"if\s*\(" => IF,
    "else" => ELSE,
    "{" => LCBRACKET,
    "}" => RCBRACKET,
    "[" => LBRACKET,
    "]" => RBRACKET,
    "][" => RLBRACKET,
    "=" => ASSIGN,
    "," => COMMA,
    ":" => COLON,
    ";" => SEMICOLON,
    r"[a-z_A-Z]+[0-9_a-zA-Z]*" => ID,
    r"[0-9]+\.[0-9]+" => FLOAT,
    r"[0-9]+" => NUMBER,
} else {
    r"[a-z_A-Z]+[0-9_a-zA-Z]*\(" => CALL_ID,
    _
}

