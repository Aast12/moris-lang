use std::str::FromStr;
use crate::ast::{Expr, Operator, TypeConst, DataType, Index, Dimension, Variable, VarRef, VarAssign};

grammar;


// Macros

Comma<TItem>: Vec<TItem> = {
    <mut vec: (<TItem> ",")*> <c: TItem?> => match c {
        None => vec,
        Some(c) => {
            vec.push(c);
            vec
        }
    }
}

Boxed<T>: Box<T> = T => Box::new(<>);

// Types

Type: DataType = {
    INT => DataType::Int,
    FLOAT => DataType::Float,
    BOOl => DataType::Bool,
    STR => DataType::String,
    DATAFRAME => DataType::DataFrame,
}

FunctionType: DataType = {
    Type,
    VOID => DataType::Void
}

Int: TypeConst = NUMBER => TypeConst::Int(i32::from_str(<>).unwrap());

Float: TypeConst = <f: r"[0-9]+\.[0-9]+"> => TypeConst::Float(f.parse::<f32>().unwrap());

Bool: TypeConst = {
    TRUE => TypeConst::Bool(true),
    FALSE => TypeConst::Bool(false)
}

Str: TypeConst = {
    <s: r#""[^"]*""#> => TypeConst::String(String::from(&s[1..s.len() - 1]))
}

VectorConst: TypeConst = "[" <Comma<Expr>> "]" => TypeConst::Vector(<>);

SimpleConst = {
    Int,
    Str,
    Float,
    Bool
}

Const = {
    SimpleConst,
    VectorConst
}

Id: Expr = ID => Expr::Id(String::from(<>));

// Variables

pub Indexing: Index = {
    <begin:Expr> ":" <end:Expr> => Index::Range(begin, end),
    <idx:Expr> => Index::Simple(idx)
}

pub Dimension: Dimension = {
    LBRACKET <a: Expr> RLBRACKET <b: Expr> RBRACKET => Dimension(2, vec![a, b]),
    LBRACKET <Expr> RBRACKET => Dimension(1, vec![<>])
}

pub VarDeclaration: Variable = {
    LET <id: ID> ":" <dtype: Type> <dim: Dimension?> <value: ("=" <Expr>)?> => Variable {
        id: String::from(id),
        data_type: dtype,
        dimension: dim.unwrap_or(Dimension(0, vec![])),
        value: value
    }
}

VarRefIndex: Vec<Index> = { // TODO Fix w custom tokenizer
    LBRACKET <Indexing> RBRACKET  => vec![<>],
    LBRACKET <a:Indexing> RLBRACKET <b:Indexing> RBRACKET => vec![<>]
}

pub VarReference: VarRef = {
    <id: ID> <indexing: VarRefIndex?> => VarRef {
        id: String::from(id),
        indexing: indexing
    } 
}

pub VarAssignment: VarAssign = <var: VarReference> ASSIGN <exp: Expr> => VarAssign(var, exp);


// Operators

ExprOp: Operator = {
    "&&" => Operator::And,
    "||" => Operator::Or
}

LogicOp: Operator = {
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "!=" => Operator::NotEq,
    "==" => Operator::Eq,
}

MathOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
}

FactorOp: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
}

PipeOp: Operator = {
    "|>" => Operator::Pipe,
}

// Expressions

Tier<Operator, NextTerm>: Box<Expr> = {
    Tier<Operator, NextTerm> Operator NextTerm => Box::new(Expr::Op(<>)),
    NextTerm
}

pub Expr: Box<Expr> = Tier<ExprOp, LogicExpr>;

LogicExpr: Box<Expr> = {
    MathExpr LogicOp MathExpr => Box::new(Expr::Op(<>)),
    MathExpr,
}

MathExpr: Box<Expr> = Tier<MathOp, Term>;

Term: Box<Expr> = Tier<FactorOp, Factor>;

Factor: Box<Expr> = {
    <factor:Factor> PipeOp "forward" <id:Boxed<Id>> => Box::new(Expr::Op(factor, Operator::ForwardPipe, id)),
    Factor PipeOp Boxed<Id> => Box::new(Expr::Op(<>)),
    Item,
}

Item: Box<Expr> = {
    Boxed<Id>,
    Const => Box::new(Expr::Const(<>)),
    "(" <Expr> ")" => Box::new(Expr::ParenthOp(<>)),
}


match {
    "int" => INT,
    "float" => FLOAT,
    "bool" => BOOl,
    "str" => STR,
    "DataFrame" => DATAFRAME,
    "void" => VOID,
    "let" => LET,
    "true" => TRUE,
    "false" => FALSE,
    "[" => LBRACKET,
    "]" => RBRACKET,
    "][" => RLBRACKET,
    "=" => ASSIGN,
    r"[a-z_A-Z]+[0-9_a-zA-Z]*" => ID,
    r"[0-9]+" => NUMBER,
} else {
    _
}

