use std::str::FromStr;
use crate::ast::{Expr, Operator};

grammar;

ExprOp: Operator = {
    "&&" => Operator::And,
    "||" => Operator::Or
};

LogicOp: Operator = {
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "!=" => Operator::NotEq,
    "==" => Operator::Eq,
};

MathOp: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
};

FactorOp: Operator = {
    "*" => Operator::Mul,
    "/" => Operator::Div,
};

PipeOp: Operator = {
    "|>" => Operator::Pipe,
};

pub Expr: Box<Expr> = {
    Expr ExprOp LogicExpr => Box::new(Expr::Op(<>)),
    LogicExpr,
};

LogicExpr: Box<Expr> = {
    MathExpr LogicOp MathExpr => Box::new(Expr::Op(<>)),
    MathExpr,
};

MathExpr: Box<Expr> = {
    MathExpr MathOp Term => Box::new(Expr::Op(<>)),
    Term,
};

Term: Box<Expr> = {
    Term FactorOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

Factor: Box<Expr> = {
    <factor:Factor> PipeOp "forward" <id:Id> => Box::new(Expr::Op(factor, Operator::ForwardPipe, id)),
    Factor PipeOp Id => Box::new(Expr::Op(<>)),
    Item,
};

PipeItem: Box<Expr> = {
    "forward" <Id>,
    Id,
};

Item: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Id,
    "(" <Expr> ")" => Box::new(Expr::ParenthOp(<>)),
};


Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Id: Box<Expr> = {
    r"[_a-zA-z]+[0-9_a-zA-z]*" => Box::new(Expr::Id(String::from(<>)))
};

